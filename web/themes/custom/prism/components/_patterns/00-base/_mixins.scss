/////////////////////
// General Mixins (put specific ones in component files where applicable)

/// Mixin - Clearfix.
/// Adds clearfix based on http://bourbon.io/docs/#clearfix
/// use example =   @include cleafix

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

/// Mixin - list-reset
/// Reset list item defaults when no margin, padding, list styles needed
@mixin list-reset {
  list-style: none;
  margin: 0;
  padding: 0;
}

@mixin frame($width: 20px, $color: $white, $height: 60%) {
  width: 100%;
  height: 100%;
  border-bottom: $width solid $color;
  position: relative;

  &::before,
  &::after {
    display: block;
    content: ' ';
    position: absolute;
    bottom: 0;
    width: $width;
    background: $color;
  }

  &::before {
    left: 0;
    height: $height / 2;
  }

  &::after {
    right: 0;
    height: $height;
  }
}

/// Mixin - With Icon
/// Precede Text with SVG icon
@mixin with-icon {
  background-size: cover;
  content: "";
  display: inline-block;
  margin-right: 0.1em;
  padding: 0.8em;
}

/// Mixin - Wrapper
/// Outer container mixin for large screens
@mixin wrapper {
  margin: 0 auto;
  max-width: $max-width;

  @include clearfix;
}

/// Mixin - Ellipsis
/// Adds ellipsis when text hits the container
/// @see https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
@mixin ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

/// Mixin - Contain text
/// Prevents long text from breaking parent layout
/// @see https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
@mixin contain-text {
  /* These are technically the same, but use both */
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-word-break: break-all;
  word-break: break-word;

  /* Adds a hyphen where the word breaks, if supported */
  -ms-hyphens: auto;
  -moz-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;
}

/// Mixin - More Link
/// Used in a number of views
@mixin more-link {
  a {
    font-size: 0.9rem;
    font-weight: 600;
    text-decoration: none;

    &::before {
      content: "»";
      font-size: 1.2rem;
      margin-right: 0.2em;
    }
  }
}

/// Mixin - Back Link
/// Used in a number of views
@mixin back-link {
  display: block;
  font-size: 0.9rem;
  font-weight: 600;
  text-decoration: none;

  &::before {
    content: "«";
    font-size: 1.2rem;
    margin-right: 0.2em;
  }
}

/// Mixin - Body Copy
@mixin body-copy {
  font-family: $font-body;
  font-size: 0.9rem;
  line-height: 1.6em;
}

/// Mixin - Transition
@mixin transition($transition-property, $transition-time, $method) {
  -webkit-transition: $transition-property $transition-time $method;
  -moz-transition: $transition-property $transition-time $method;
  -ms-transition: $transition-property $transition-time $method;
  -o-transition: $transition-property $transition-time $method;
  transition: $transition-property $transition-time $method;
}

/// Mixin - Standard Margin
@mixin margin {
  margin-bottom: 1em;
}

/// svg-ir()
///
/// Image replacement for embedded SVGs.
///
/// @param {Length} $width - width in any valid CSS length
/// @param {Length} $height - height in any valid CSS length
/// @param {String} $image-source - full SVG source of the image
/// @param {String} $display [block] - display type, such as inline-block
/// @requires svg-url
///
/// @author Ivan Boothe
@mixin svg-ir($width, $height, $image-source, $display: block) {
  display: $display;
  width: $width;
  height: $height;
  background-image: svg-url($image-source);
  background-position: 50% 50%;
  background-repeat: no-repeat;
  background-size: cover;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

/// svg-url()
///
/// Create an optimized SVG URL for embedding.
///
/// @requires str-replace
///
/// @link http://codepen.io/tigt/post/optimizing-svgs-in-data-uris
/// @author Jakob Eriksen
@function svg-url($svg) {

  // Chunk up string in order to avoid "stack level too deep" error
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) /$slice);

  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);

    // Encode (may need a few extra replacements)
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }

  @return url("data:image/svg+xml,#{$encoded}");
}

/// Replace characters in a string.
///
/// @link http://codepen.io/Tigt/blog/optimizing-svgs-in-data-uris
/// @author Jakob Eriksen

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Full Width
// Pulls in `./node_modules/sass-tools/lib/_full-width.scss`
// Use `@include full-width()` to have any element break outside of a constraining container and span the full browser width
@import "full-width";

.full-width {
  @include full-width;
}

@mixin full-width--offset($right-offset) {
  @include full-width;

  left: 50% + $right-offset;
  right: 50% - $right-offset;
}

@mixin breakout-container($viewport-percent) {
  width: $viewport-percent + vw;
  max-width: $viewport-percent + vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -$viewport-percent/2 + vw;
  margin-right: -$viewport-percent/2 + vw;
}

@import "center";

.centered {
  @include center;
}

// visually-hidden()
//
// Make an element visually hidden, but accessible to screen readers, etc.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
//
// Style guide: sass.mixins.visually-hidden
@mixin visually-hidden {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  word-wrap: normal;
}

// visually-hidden--off()
//
// Turns off the visually-hidden effect.
//
// Style guide: sass.mixins.visually-hidden--off
@mixin visually-hidden--off($position: static) {
  position: $position !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: visible;
}
